<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>http on 赵海宇的博客</title><link>https://www.zhaohaiyu.com/tags/http/</link><description>Recent content in http on 赵海宇的博客</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 16 Dec 2021 22:09:38 +0800</lastBuildDate><atom:link href="https://www.zhaohaiyu.com/tags/http/index.xml" rel="self" type="application/rss+xml"/><item><title>Nethttp Gin</title><link>https://www.zhaohaiyu.com/post/nethttp-gin/</link><pubDate>Thu, 16 Dec 2021 22:09:38 +0800</pubDate><guid>https://www.zhaohaiyu.com/post/nethttp-gin/</guid><description>net/http 路由注册 func test1() { http.HandleFunc(&amp;quot;/&amp;quot;, func(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, &amp;quot;Hello world!&amp;quot;) }) err := http.ListenAndServe(&amp;quot;:9001&amp;quot;, nil) if err != nil { log.Fatal(&amp;quot;ListenAndServer:&amp;quot;, err) } } 在使用ListenAndServe这个方法时，系统就会给我们指派一个路由器，DefaultServeMux是系统默认使用的路由器，如果Li</description></item><item><title>Go Gin框架介绍及使用</title><link>https://www.zhaohaiyu.com/post/go-gin/</link><pubDate>Sun, 09 May 2021 14:53:19 +0800</pubDate><guid>https://www.zhaohaiyu.com/post/go-gin/</guid><description>Gin框架介绍 基于httprouter开发的Web框架。 中文文档，齐全。 简单易用的轻量级框架。 Gin框架安装 go get -u github.com/gin-gonic/gin 实例: package main import ( &amp;quot;fmt&amp;quot; &amp;quot;github.com/gin-gonic/gin&amp;quot; ) func main() { r := gin.Default() // 创建一个默认的路由引擎 // 也可以用gin.New()</description></item><item><title>Go web源码解析</title><link>https://www.zhaohaiyu.com/post/go-net-http/</link><pubDate>Sat, 13 Mar 2021 17:35:23 +0800</pubDate><guid>https://www.zhaohaiyu.com/post/go-net-http/</guid><description>Go的web工作原理 在Go中使用及其简单的代码即可开启一个web服务。如下： //开启web服务 func test(){ http.HandleFunc(&amp;quot;/&amp;quot;, sayHello) err := http.ListenAndServe(&amp;quot;:9090&amp;quot;,nil) if err!=nil { log.Fatal(&amp;quot;ListenAndServer:&amp;quot;,err) } } func sayHello(w http.ResponseWriter, r *http.Request){ r.ParseForm() fmt.Println(&amp;quot;path&amp;quot;,r.URL.Path) fmt.Println(&amp;quot;scheme&amp;quot;,r.URL.Scheme) fmt.Fprintf(w, &amp;quot;Hello Guest!&amp;quot;) } 在使用ListenAndServe这个方法时，系统就会给</description></item><item><title>Http Https</title><link>https://www.zhaohaiyu.com/post/http-https/</link><pubDate>Fri, 12 Feb 2021 17:30:43 +0800</pubDate><guid>https://www.zhaohaiyu.com/post/http-https/</guid><description>HTTP协议是什么？ HTTP协议是超文本传输协议的缩写，英文是Hyper Text Transfer Protocol。它是从WEB服务器传输超文本标记语言(HTML)到本地浏览器的传送协议。 设计HTTP最初的目的是为了提供一</description></item></channel></rss>