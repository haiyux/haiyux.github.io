<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>grpc on 赵海宇的博客</title><link>/tags/grpc/</link><description>Recent content in grpc on 赵海宇的博客</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 24 May 2021 15:13:11 +0800</lastBuildDate><atom:link href="/tags/grpc/index.xml" rel="self" type="application/rss+xml"/><item><title>grpc超时控制</title><link>/post/grpc-timeout/</link><pubDate>Mon, 24 May 2021 15:13:11 +0800</pubDate><guid>/post/grpc-timeout/</guid><description>什么是超时控制？ 超时控制，使我们的服务之间调用可以快速抛错。比如API接口设置1s超时API调用A服务用了500ms，服务A调用和服务B用了600ms，n那么现在已经超时，还要调用服务C等等，再返回超</description></item><item><title>grpc服务发现与负载均衡</title><link>/post/grpc-servicediscovery-loadbalancing/</link><pubDate>Sun, 23 May 2021 15:13:11 +0800</pubDate><guid>/post/grpc-servicediscovery-loadbalancing/</guid><description>前言 在后台服务开发中，高可用性是构建中核心且重要的一环。服务发现（Service discovery）和负载均衡（Load Balance）一直都是我关注的话题。今天来谈一下我在实际中是如何理解及落地的。</description></item><item><title>grpc基础</title><link>/post/grpc/</link><pubDate>Sun, 29 Nov 2020 06:33:45 +0800</pubDate><guid>/post/grpc/</guid><description>RPC 框架原理 RPC 框架的目标就是让远程服务调用更加简单、透明，RPC 框架负责屏蔽底层的传输方式（TCP 或者 UDP）、序列化方式（XML/Json/ 二进制）和通信细节。服务调用者可以像调用本地接口一样调用远程</description></item></channel></rss>