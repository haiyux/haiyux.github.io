<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>microservice on haiyux's blog</title><link>https://www.zhaohaiyu.com/categories/microservice/</link><description>Recent content in microservice on haiyux's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 26 Dec 2021 21:05:44 +0800</lastBuildDate><atom:link href="https://www.zhaohaiyu.com/categories/microservice/index.xml" rel="self" type="application/rss+xml"/><item><title>kratos v2版本命令行工具使用</title><link>https://www.zhaohaiyu.com/post/microservice/kratos-v2-tool/</link><pubDate>Sun, 26 Dec 2021 21:05:44 +0800</pubDate><guid>https://www.zhaohaiyu.com/post/microservice/kratos-v2-tool/</guid><description>kratos命令行工具是什么？ kratos tool 是微服务框架 kratos 的命令行工具，提供创建模板，编译protobuf 文件，运行项目等功能。 使用 下载 go install github.com/go-kratos/kratos/cmd/kratos/v2@latest 查看是否</description></item><item><title>通过 layout 探索 kratos 运行原理</title><link>https://www.zhaohaiyu.com/post/microservice/kratos-layout/</link><pubDate>Sat, 02 Oct 2021 18:03:24 +0800</pubDate><guid>https://www.zhaohaiyu.com/post/microservice/kratos-layout/</guid><description>创建项目 首先需要安装好对应的依赖环境，以及工具： go 下载 protoc go install google.golang.org/protobuf/cmd/protoc-gen-go@latest protoc-gen-go go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest # 创建项目模板 kratos new helloworld cd helloworld # 拉取项目依赖 go mod download # 生成proto模板 kratos proto add</description></item><item><title>限流</title><link>https://www.zhaohaiyu.com/post/microservice/currentlimiting/</link><pubDate>Thu, 30 Sep 2021 07:33:45 +0800</pubDate><guid>https://www.zhaohaiyu.com/post/microservice/currentlimiting/</guid><description>令牌桶算法 是一个存放固定容量令牌的桶，按照固定速率往桶里添加令牌。令牌桶算法的描述如下： 假设限制2r/s，则按照500毫秒的固定速率往桶中添</description></item><item><title>隔离</title><link>https://www.zhaohaiyu.com/post/microservice/quarantine/</link><pubDate>Wed, 29 Sep 2021 06:33:45 +0800</pubDate><guid>https://www.zhaohaiyu.com/post/microservice/quarantine/</guid><description>什么是隔离？ 隔离，本质上是对系统或资源进行分割，从而实现当系统发生故障时能限定传播范围和影响范围，即发生故障后只有出问题的服务不可用，保证其</description></item><item><title>从kratos分析breaker熔断器源码实现</title><link>https://www.zhaohaiyu.com/post/microservice/breaker/</link><pubDate>Sat, 04 Sep 2021 17:55:01 +0800</pubDate><guid>https://www.zhaohaiyu.com/post/microservice/breaker/</guid><description>为什么要用熔断 前面我们讲过限流保证服务的可用性，不被突如其来的流量打爆。但是两种情况是限流解决不了的。 如果我们服务只能处理1000QPS，但</description></item><item><title>从kratos分析BBR限流源码实现</title><link>https://www.zhaohaiyu.com/post/microservice/overload/</link><pubDate>Sat, 04 Sep 2021 11:58:30 +0800</pubDate><guid>https://www.zhaohaiyu.com/post/microservice/overload/</guid><description>什么是自适应限流 自适应限流从整体维度对应用入口流量进行控制，结合应用的 Load、CPU 使用率、总体平均 RT、入口 QPS 和并发线程数等几个维度的监</description></item><item><title>Kratos日志库的使用姿势</title><link>https://www.zhaohaiyu.com/post/microservice/kratos-log/</link><pubDate>Thu, 19 Aug 2021 18:11:50 +0800</pubDate><guid>https://www.zhaohaiyu.com/post/microservice/kratos-log/</guid><description>什么是日志 所谓日志（Log）是指系统所指定对象的某些操作和其操作结果按时间有序的集合。log文件就是日志文件，log文件记录了系统和系统的用</description></item><item><title>grpc超时控制</title><link>https://www.zhaohaiyu.com/post/microservice/grpc-timeout/</link><pubDate>Mon, 24 May 2021 15:13:11 +0800</pubDate><guid>https://www.zhaohaiyu.com/post/microservice/grpc-timeout/</guid><description>什么是超时控制？ 超时控制，使我们的服务之间调用可以快速抛错。比如API接口设置1s超时API调用A服务用了500ms，服务A调用和服务B用了</description></item><item><title>grpc服务发现与负载均衡</title><link>https://www.zhaohaiyu.com/post/microservice/grpc-servicediscovery-loadbalancing/</link><pubDate>Sun, 23 May 2021 15:13:11 +0800</pubDate><guid>https://www.zhaohaiyu.com/post/microservice/grpc-servicediscovery-loadbalancing/</guid><description>前言 在后台服务开发中，高可用性是构建中核心且重要的一环。服务发现（Service discovery）和负载均衡（Load Balance）一直</description></item><item><title>分布式ID和锁</title><link>https://www.zhaohaiyu.com/post/microservice/distributed_id_lock/</link><pubDate>Sat, 23 Jan 2021 15:13:11 +0800</pubDate><guid>https://www.zhaohaiyu.com/post/microservice/distributed_id_lock/</guid><description>分布式id生成器 有时我们需要能够生成类似MySQL自增ID这样不断增大，同时又不会重复的id。以支持业务中的高并发场景。比较典型的，电商促销</description></item><item><title>thrift的介绍及其使用</title><link>https://www.zhaohaiyu.com/post/microservice/thrift/</link><pubDate>Tue, 19 Jan 2021 20:10:55 +0800</pubDate><guid>https://www.zhaohaiyu.com/post/microservice/thrift/</guid><description>什么是thrift Thrift是Facebook于2007年开发的跨语言的rpc服框架，提供多语言的编译功能，并提供多种服务器工作模式；用户</description></item><item><title>grpc基础</title><link>https://www.zhaohaiyu.com/post/microservice/grpc/</link><pubDate>Sun, 29 Nov 2020 06:33:45 +0800</pubDate><guid>https://www.zhaohaiyu.com/post/microservice/grpc/</guid><description>RPC 框架原理 RPC 框架的目标就是让远程服务调用更加简单、透明，RPC 框架负责屏蔽底层的传输方式（TCP 或者 UDP）、序列化方式（XML/Json/</description></item><item><title>proto bufer</title><link>https://www.zhaohaiyu.com/post/microservice/protobufer/</link><pubDate>Sat, 28 Nov 2020 10:33:45 +0800</pubDate><guid>https://www.zhaohaiyu.com/post/microservice/protobufer/</guid><description>protobuf是一种高效的数据格式，平台无关、语言无关、可扩展，可用于 RPC 系统和持续数据存储系统。 protobuf介绍 Protobuf是Pr</description></item><item><title>微服务架构及raft协议</title><link>https://www.zhaohaiyu.com/post/microservice/microservice-raft/</link><pubDate>Fri, 27 Nov 2020 10:33:45 +0800</pubDate><guid>https://www.zhaohaiyu.com/post/microservice/microservice-raft/</guid><description>微服务架构全景图 服务注册和发现 Client side implement 调用需要维护所有调用服务的地址 有一定的技术难度，需要rpc框架支持 Server side implement 架构简单 有单点故障 注册中心 etc</description></item></channel></rss>